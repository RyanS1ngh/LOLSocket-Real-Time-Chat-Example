const WebSocket = require('ws');

class LOLSocket {
  constructor(apiKey, apiSecret) {
    this.apiKey = apiKey;
    this.apiSecret = apiSecret;
    this.socket = null; // Initialize socket as null

    // Initialize an object to store event callbacks and channels
    this.eventCallbacks = {};
    this.channels = {};

    // Boolean flag to track whether the connection is open
    this.isConnectionOpen = false;

    this.connect();
  }

  connect() {
    // Create a new WebSocket instance
    this.socket = new WebSocket(`ws://localhost:1210/${this.apiKey}/${this.apiSecret}`);

    // Listen for the connection open event
    this.socket.on('open', () => {
      this.onOpen();
    });

    // Listen for incoming messages and dispatch events accordingly
    this.socket.on('message', (data) => {
      const message = JSON.parse(data);
      const namespace = message.namespace;
/* 
      // Dispatch global events
      if (this.eventCallbacks[event]) {
        this.eventCallbacks[event].forEach((callback) => {
          callback(message.data);
        });
      }
 */
      // Dispatch channel-specific events
      if (this.channels[message.channel]) {
        this.channels[message.channel].forEach((subscription) => {
          if (subscription.namespace === namespace) {
            subscription.callback(message.data);
          }
        });
      }
    });
  }

  subscribe(channel, callback) {
    if (!this.channels[channel]) {
      this.channels[channel] = [];
    }
    setTimeout(() => {
      this.socket.send(JSON.stringify({
        event: 'subscribe',
        channel: channel,
      }));
    }, 1000);

    return {
      bind: (namespace, callback) => {
        this.channels[channel].push({ namespace, callback });
      }
    }
  }

  onOpen() {
    console.log('Connected to server');
    this.isConnectionOpen = true;

    // Dispatch any pending subscriptions
    for (const channel in this.channels) {
      if (this.channels.hasOwnProperty(channel)) {
        this.channels[channel].forEach((subscription) => {
          this.subscribe(channel, subscription.callback);
        });
      }
    }
  }
}

module.exports = LOLSocket;
